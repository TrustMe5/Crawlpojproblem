Financial Management,http://poj.org/problem?id=1004, 1000MS, 10000K,"Larry graduated this year and finally has a job. He's making a lot of money, but somehow never seems to have enough. Larry has decided that he needs to grab hold of his financial portfolio and solve his financing problems. The first step is to figure out what's been going on with his money. Larry has his bank account statements and wants to see how much money he has. Help Larry by writing a program to take his closing balance from each of the past twelve months and calculate his average account balance. ",The input will be twelve lines. Each line will contain the closing balance of his bank account for a particular month. Each number will be positive and displayed to the penny. No dollar sign will be included. ,"The output will be a single number, the average (mean) of the closing balances for the twelve months. It will be rounded to the nearest penny, preceded immediately by a dollar sign, and followed by the end-of-line. There will be no other spaces or characters in the output. ","100.00
489.12
12454.12
1234.10
823.05
109.20
5.27
1542.25
839.18
83.99
1295.01
1.75",$1581.42
Hangover,http://poj.org/problem?id=1003, 1000MS, 10000K,"How far can you make a stack of cards overhang a table? If you have one card, you can create a maximum overhang of half a card length. (We're assuming that the cards must be perpendicular to the table.) With two cards you can make the top card overhang the bottom one by half a card length, and the bottom one overhang the table by a third of a card length, for a total maximum overhang of 1/2 + 1/3 = 5/6 card lengths. In general you can make n cards overhang by 1/2 + 1/3 + 1/4 + ... + 1/(n + 1) card lengths, where the top card overhangs the second by 1/2, the second overhangs tha third by 1/3, the third overhangs the fourth by 1/4, etc., and the bottom card overhangs the table by 1/(n + 1). This is illustrated in the figure below.","The input consists of one or more test cases, followed by a line containing the number 0.00 that signals the end of the input. Each test case is a single line containing a positive floating-point number c whose value is at least 0.01 and at most 5.20; c will contain exactly three digits.","For each test case, output the minimum number of cards necessary to achieve an overhang of at least c card lengths. Use the exact output format shown in the examples.","1.00
3.71
0.04
5.19
0.00
","3 card(s)
61 card(s)
1 card(s)
273 card(s)"
487-3279,http://poj.org/problem?id=1002, 2000MS, 65536K,"Businesses like to have memorable telephone numbers. One way to make a telephone number memorable is to have it spell a memorable word or phrase. For example, you can call the University of Waterloo by dialing the memorable TUT-GLOP. Sometimes only part of the number is used to spell a word. When you get back to your hotel tonight you can order a pizza from Gino's by dialing 310-GINO. Another way to make a telephone number memorable is to group the digits in a memorable way. You could order your pizza from Pizza Hut by calling their ``three tens'' number 3-10-10-10.The standard form of a telephone number is seven decimal digits with a hyphen between the third and fourth digits (e.g. 888-1200). The keypad of a phone supplies the mapping of letters to numbers, as follows:A, B, and C map to 2D, E, and F map to 3G, H, and I map to 4J, K, and L map to 5M, N, and O map to 6P, R, and S map to 7T, U, and V map to 8W, X, and Y map to 9There is no mapping for Q or Z. Hyphens are not dialed, and can be added and removed as necessary. The standard form of TUT-GLOP is 888-4567, the standard form of 310-GINO is 310-4466, and the standard form of 3-10-10-10 is 310-1010.Two telephone numbers are equivalent if they have the same standard form. (They dial the same number.)Your company is compiling a directory of telephone numbers from local businesses. As part of the quality control process you want to check that no two (or more) businesses in the directory have the same telephone number.","The inpA+B Problem,http://poj.org/problem?id=1000, 1000MS, 10000K,Calculate a+b ,"Two integer a,b (0OutputOutput a+bSample Input1 2Sample Output3HintQ: Where are the input and the output?A: Your program shall always read input from stdin (Standard Input) and write output to stdout (Standard Output). For example, you can use 'scanf' in C or 'cin' in C++ to read from stdin, and use 'printf' in C or 'cout' in C++ to write to stdout.You shall not output any extra data to standard output other than that required by the problem, otherwise you will get a ""Wrong Answer"".User programs are not allowed to open and read from/write to files. You will get a ""Runtime Error"" or a ""Wrong Answer""if you try to do so. Here is a sample solution to problem 1000 using C++/G++:#include <iostream>using namespace std;int main(){    int a,b;    cin >> a >> b;    cout     return 0;}It's important that the return type of main() must be int when you use G++/GCC,or you may get compile error.Here is a sample solution to problem 1000 using C/GCC:#include <stdio.h>int main(){    int a,b;    scanf(""%d %d"",&a, &b);    printf(""%d\n"",a+b);    return 0;}Here is a sample solution to problem 1000 using Pascal:program p1000(Input,Output);var  a,b:Integer;begin   Readln(a,b);   Writeln(a+b);end.Here is a sample solution to problem 1000 using Java:Now java compiler is jdk 1.5, next is program for 1000import java.io.*;import java.util.*;public class Main{            public static void main(String args[]) throws Exception            {                    Scanner cin=new Scanner(System.in);                    int a=cin.nextInt(),b=cin.nextInt();                    System.out.println(a+b);            }}Old program for jdk 1.4import java.io.*;import java.util.*;public class Main{    public static void main (String args[]) throws Exception    {        BufferedReader stdin =             new BufferedReader(                new InputStreamReader(System.in));        String line = stdin.readLine();        StringTokenizer st = new StringTokenizer(line);        int a = Integer.parseInt(st.nextToken());        int b = Integer.parseInt(st.nextToken());        System.out.println(a+b);    }}Here is a sample solution to problem 1000 using Fortran:	PROGRAM P1000		IMPLICIT NONE		INTEGER :: A, B		READ(*,*) A, B		WRITE(*, ""(I0)"") A + B	END PROGRAM P1000SourcePOJ",Output a+b,1 2,3
Numbers That Count,http://poj.org/problem?id=1016, 1000MS, 10000K,"""Kronecker's Knumbers"" is a little company that manufactures plastic digits for use in signs (theater marquees, gas station price displays, and so on). The owner and sole employee, Klyde Kronecker, keeps track of how many digits of each type he has used by maintaining an inventory book. For instance, if he has just made a sign containing the telephone number ""5553141"", he'll write down the number ""5553141"" in one column of his book, and in the next column he'll list how many of each digit he used: two 1s, one 3, one 4, and three 5s. (Digits that don't get used don't appear in the inventory.) He writes the inventory in condensed form, like this: ""21131435"". The other day, Klyde filled an order for the number 31123314 and was amazed to discover that the inventory of this number is the same as the number---it has three 1s, one 2, three 3s, and one 4! He calls this an example of a ""self-inventorying number"", and now he wants to find out which numbers are self-inventorying, or lead to a self-inventorying number through iterated application of the inventorying operation described below. You have been hired to help him in his investigations. Given any non-negative integer n, its inventory is another integer consisting of a concatenation of integers c1 d1 c2 d2 ... ck dk , where each ci and di is an unsigned integer, every ci is positive, the di satisfy 0<=d1<d2<...<dk<=9, and, for each digit d that appears anywhere in n, d equals di for some i and d occurs exactly ci times in the decimal representation of n. For instance, to compute the inventory of 5553141 we set c1 = 2, d1 = 1, c2 = 1, d2 = 3, etc., giving 2113143